# Copyright (c) 2016-2020 The Zcash developers
# Copyright (c) 2013-2019 The Bitcoin Core developers
# Copyright (c) 2013-2019 Bitcoin Developers
# Distributed under the MIT software license, see the accompanying
# file COPYING or https://www.opensource.org/licenses/mit-license.php .

TESTS += test/test_bitcoin
noinst_PROGRAMS += test/test_bitcoin
TEST_SRCDIR = test
TEST_BINARY=test/test_bitcoin$(EXEEXT)


EXTRA_DIST += \
	test/bctest.py \
	test/bitcoin-util-test.py \
	test/data/bitcoin-util-test.json \
	test/data/blanktx.hex \
	test/data/tt-delin1-out.hex \
	test/data/tt-delout1-out.hex \
	test/data/tt-locktime317000-out.hex \
	test/data/tx394b54bb.hex \
	test/data/txcreate1.hex \
	test/data/txcreate2.hex \
	test/data/txcreatesign.hex

JSON_TEST_FILES = \
  test/data/script_valid.json \
  test/data/base58_keys_valid.json \
  test/data/base58_encode_decode.json \
  test/data/base58_keys_invalid.json \
  test/data/script_invalid.json \
  test/data/tx_invalid.json \
  test/data/tx_valid.json \
  test/data/sighash.json \
  test/data/merkle_roots.json \
  test/data/merkle_serialization.json \
  test/data/merkle_witness_serialization.json \
  test/data/merkle_path.json \
  test/data/merkle_commitments.json \
  test/data/merkle_roots_sapling.json \
  test/data/merkle_serialization_sapling.json \
  test/data/merkle_witness_serialization_sapling.json \
  test/data/merkle_path_sapling.json \
  test/data/merkle_commitments_sapling.json \
  test/data/sapling_key_components.json \
  test/data/unified_addrs.json \
  test/data/unified_full_viewing_keys.json \
  test/data/zip0244.json

RAW_TEST_FILES = test/data/alertTests.raw

GENERATED_TEST_FILES = $(JSON_TEST_FILES:.json=.json.h) $(RAW_TEST_FILES:.raw=.raw.h)

BITCOIN_TEST_SUITE = \
  test/test_bitcoin.h \
  test/test_bitcoin.cpp

BITCOIN_TESTS =\
  test/arith_uint256_tests.cpp \
  test/scriptnum10.h \
  test/addrman_tests.cpp \
  test/alert_tests.cpp \
  test/allocator_tests.cpp \
  test/base32_tests.cpp \
  test/base58_tests.cpp \
  test/base64_tests.cpp \
  test/bech32_tests.cpp \
  test/bip32_tests.cpp \
  test/bloom_tests.cpp \
  test/checkblock_tests.cpp \
  test/Checkpoints_tests.cpp \
  test/checkqueue_tests.cpp \
  test/coins_tests.cpp \
  test/compress_tests.cpp \
  test/convertbits_tests.cpp \
  test/crypto_tests.cpp \
  test/cuckoocache_tests.cpp \
  test/DoS_tests.cpp \
  test/equihash_tests.cpp \
  test/getarg_tests.cpp \
  test/hash_tests.cpp \
  test/key_tests.cpp \
  test/limitedmap_tests.cpp \
  test/dbwrapper_tests.cpp \
  test/main_tests.cpp \
  test/mempool_tests.cpp \
  test/merkle_tests.cpp \
  test/miner_tests.cpp \
  test/multisig_tests.cpp \
  test/net_tests.cpp \
  test/netbase_tests.cpp \
  test/pmt_tests.cpp \
  test/pow_tests.cpp \
  test/prevector_tests.cpp \
  test/raii_event_tests.cpp \
  test/random_tests.cpp \
  test/reverselock_tests.cpp \
  test/rpc_tests.cpp \
  test/sanity_tests.cpp \
  test/scheduler_tests.cpp \
  test/script_P2SH_tests.cpp \
  test/script_P2PKH_tests.cpp \
  test/script_tests.cpp \
  test/script_standard_tests.cpp \
  test/scriptnum_tests.cpp \
  test/serialize_tests.cpp \
  test/sighash_tests.cpp \
  test/sigopcount_tests.cpp \
  test/skiplist_tests.cpp \
  test/streams_tests.cpp \
  test/sync_tests.cpp \
  test/test_util.cpp \
  test/test_util.h \
  test/torcontrol_tests.cpp \
  test/transaction_tests.cpp \
  test/txvalidationcache_tests.cpp \
  test/uint256_tests.cpp \
  test/univalue_tests.cpp \
  test/util_tests.cpp \
  test/sha256compress_tests.cpp

if ENABLE_WALLET
BITCOIN_TESTS += \
  wallet/test/wallet_tests.cpp \
  wallet/test/crypto_tests.cpp \
  wallet/test/rpc_wallet_tests.cpp

BITCOIN_TEST_SUITE += \
  wallet/test/wallet_test_fixture.cpp \
  wallet/test/wallet_test_fixture.h
endif

test_test_bitcoin_SOURCES = $(BITCOIN_TEST_SUITE) $(BITCOIN_TESTS) $(JSON_TEST_FILES) $(RAW_TEST_FILES)
test_test_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -I$(builddir)/test/ $(TESTDEFS) $(EVENT_CFLAGS)
test_test_bitcoin_LDADD =
if ENABLE_WALLET
test_test_bitcoin_LDADD += $(LIBBITCOIN_WALLET)
endif

test_test_bitcoin_LDADD += $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CONSENSUS) $(LIBBITCOIN_SCRIPT) $(LIBBITCOIN_CRYPTO) $(LIBCXXBRIDGE) $(LIBUNIVALUE) \
  $(LIBLEVELDB) $(LIBLEVELDB_SSE42) $(LIBMEMENV) $(BOOST_LIBS) $(BOOST_UNIT_TEST_FRAMEWORK_LIB) $(LIBSECP256K1) $(EVENT_LIBS) $(EVENT_PTHREADS_LIBS)
test_test_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)

test_test_bitcoin_LDADD += $(LIBZCASH_SCRIPT) $(BDB_LIBS) $(LIBRUSTZCASH) $(LIBZCASH) $(LIBZCASH_LIBS)
test_test_bitcoin_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS) -static

if ENABLE_ZMQ
test_test_bitcoin_LDADD += $(ZMQ_LIBS)
endif

nodist_test_test_bitcoin_SOURCES = $(GENERATED_TEST_FILES)

$(BITCOIN_TESTS): $(GENERATED_TEST_FILES)

CLEAN_BITCOIN_TEST = test/*.gcda test/*.gcno $(GENERATED_TEST_FILES)

CLEANFILES += $(CLEAN_BITCOIN_TEST)

bitcoin_test: $(TEST_BINARY)

bitcoin_test_check: $(TEST_BINARY) FORCE
	$(MAKE) check-TESTS TESTS=$^

bitcoin_test_clean : FORCE
	rm -f $(CLEAN_BITCOIN_TEST) $(test_test_bitcoin_OBJECTS) $(TEST_BINARY)

check-local:
	@echo "Running test/bitcoin-util-test.py..."
	$(AM_V_at)srcdir=$(srcdir) PYTHONPATH=$(builddir)/test $(PYTHON) $(srcdir)/test/bitcoin-util-test.py
	$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C secp256k1 check
	$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C univalue check


SUITES = $(shell cat $(BITCOIN_TESTS) | grep "BOOST_FIXTURE_TEST_SUITE\|BOOST_AUTO_TEST_SUITE" | grep -v "DISABLED_TEST_SUITE" | cut -d '(' -f 2 | cut -d ',' -f 1 | cut -d ')' -f 1 | grep . | sed -e 's/^/testsuite./')

testsuite.%: test/test_bitcoin
	@echo $(SUITES)
	$(TEST_BINARY) -t $* > $*.log 2>&1 || (cat $*.log && false)

parallel_btests: $(SUITES)

%.json.h: %.json
	@$(MKDIR_P) $(@D)
	@echo "namespace json_tests{" > $@
	@echo "static unsigned const char $(*F)[] = {" >> $@
	@$(HEXDUMP) -v -e '8/1 "0x%02x, "' -e '"\n"' $< | $(SED) -e 's/0x  ,//g' >> $@
	@echo "};};" >> $@
	@echo "Generated $@"

%.raw.h: %.raw
	@$(MKDIR_P) $(@D)
	@echo "namespace alert_tests{" > $@
	@echo "static unsigned const char $(*F)[] = {" >> $@
	@$(HEXDUMP) -v -e '8/1 "0x%02x, "' -e '"\n"' $< | $(SED) -e 's/0x  ,//g' >> $@
	@echo "};};" >> $@
	@echo "Generated $@"
